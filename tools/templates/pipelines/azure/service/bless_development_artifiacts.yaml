# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - 'master-bytelight'
  - 'azure-pipelines'

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'cf-ecy-heartbeat-svc-docker'
  tag: 'connected-facilities'
  allow_cve_high: '0'
  allow_cve_medium: '2'

steps:
  - checkout: 'self'
    # readme: https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml
    persistCredentials: true
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
  - task: 'AzureCLI@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Static Analysis of Software'
    inputs:
      azureSubscription: 'cf-dev-az-service-connection'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: './ci/recipes/sast.sh'
  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: 'vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H'
      sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC4+3ECGASdmMlcWX9dW/7AYBgmEK2UkNGh3J6L1pmBXoIe1nIoRldY23jv41G8zpO/88mUe4aPpqVLJEbVZOz8FN7EzUYEZXyKSgXYlh9gxdpVAMmSoTaPIJq6IwHw0OL0BE/HhyaYqONZSZr2er76q5t7Iy6RNKPkAY2YEINflPF9tMvZaUQaQoQ6WoDMxbyqGqrYTfXKROsbI27RRi5YZ5Nru3Urv/pUYWivUlJwMsF6dHXmKPc7Z8VR+c+4yPkVapYNH3AQMZh6ixIQIZ2Hiuo87ldXu6uthpc1DHoPTrCN3im0W5b6K6zmyFJ+nV8cxpQSL9xuilUkN/Abb3OFR4a0GvrNbyyeEe2gWCJVSiLoPQMN+LQAG0o4L97BXTkXu5a+HMwZOd3ZKb09WpV5Fe7bCWeIoVDpqGNc2QFUUq+lZ7AfpJxYeJtGXlNSPXCc11r9Hj3NE6g2OnBIw2Lp5icT8yrNu20ufPMV7PVvP+NM2SCSuz/eiIrfMjXg8Yycxd46N5TDfngrBmmAj/FORIrJW8eNsPuil0V48juCRdZSFGFR8UQbolq6xMe53v73CJD7z2oZ5zMNn3jA1hD+6z1YZbZeE0HL96QDnEFcIl58qt/AMPE0A5Kvywr7QxFHZ7/ia0+EEumnLknRu5Li9C9AizqE/2OFfuDcWYjj5w== techguru@byiq.com'
      sshKeySecureFile: 'go-shared-modules-private-key'
  - task: 'AzureCLI@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Go Modules fetch vendor folder'
    inputs:
      azureSubscription: 'cf-dev-az-service-connection'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: './ci/recipes/go_module_fetch_vendor_folder.sh'
  - task: 'Docker@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Build and push cf-ecy-heartbeat-svc docker container'
    inputs:
      repository: '$(imageName)'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      containerRegistry: 'cf-dev-acr-service-connection'
      tags: |
        $(tag)
  - task: 'Docker@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Login to ACR for Dev registry'
    inputs:
      command: 'login'
      containerRegistry: 'cf-dev-acr-service-connection'
  - task: 'DownloadSecureFile@1'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    name: neuvectorLicense
    displayName: Get NeuVector license
    inputs:
      secureFile: 'neuvector-license.txt'
  - task: 'AzureCLI@2'
    condition: false
#    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Invoke Neuvector Scanner Environment'
    inputs:
      azureSubscription: 'cf-dev-az-service-connection'
      addSpnToEnvironment: 'cf-dev-acr-service-connection'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: './ci/recipes/neuvector_scanner.sh'
      arguments: '$(neuvectorLicense.secureFilePath) $(imageName) $(tag) $(allow_cve_high) $(allow_cve_medium)'
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: 'Bash@3'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Scan Source and Docker Image with Synopsys Detect'
    inputs:
      targetType: 'inline'
      script: >
        bash <(curl -s -L https://detect.synopsys.com/detect.sh)
        --detect.blackduck.signature.scanner.individual.file.matching=ALL
        --detect.blackduck.signature.scanner.dry.run=false
        --blackduck.api.token=$(BD_TOKEN)
        --blackduck.url="$(blackduckURL)"
        --detect.blackduck.signature.scanner.paths=$(Build.SourcesDirectory)
        --detect.blackduck.signature.scanner.exclusion.pattern.search.depth=100
        --detect.project.name=CF-$(Build.DefinitionName)
        --detect.project.version.name=$(Build.BuildNumber)
        --detect.docker.image=cfdevregistry.azurecr.io/$(imageName):$(tag)
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: 'AzureCLI@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Go Modules remove vendor folder'
    inputs:
      azureSubscription: 'cf-dev-az-service-connection'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: './ci/recipes/go_module_remove_vendor_folder.sh'
  - task: 'AzureCLI@2'
    condition: and(succeeded(), ne(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
    displayName: 'Bless Development artifacts'
    inputs:
      azureSubscription: 'cf-dev-az-service-connection'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: './ci/recipes/bless_development_artifacts.sh'
      # inlineScript:
      # arguments
      # powerShellErrorActionPreference
      # addSpnToEnvironment
      # useGlobalConfig
      # workingDirectory
      # failOnStandardError
      # powerShellIgnoreLASTEXITCODE
