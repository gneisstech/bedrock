---
#
# trigger this pipeline when desired to perform a full CI test
#

trigger: none
pr: none

schedules:
  - cron: "0 4 * * *"
    displayName: Nightly build
    branches:
      include:
        - master-bytelight
    always: true

pool:
  vmImage: 'ubuntu-18.04'

variables:
  DD_CLIENT_API_KEY: ''
  DD_CLIENT_APP_KEY: ''
  BEDROCK_DEPLOYMENT_CATALOG: 'br_deployments.yaml'
  BEDROCK_CLUSTER: 'BR_CI'
  BEDROCK_INVOKED_DIR: ''
  BEDROCK_SUBSCRIPTION: 'br-dev-az-service-connection'

jobs:
  - job: 'ci_full_test'
    timeoutInMinutes: 120
    steps:
      - checkout: self
        # readme: https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml
        persistCredentials: true
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Init Bedrock Tools Container Runtime'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            ./ci/recipes/init_bedrock_tools.sh
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Static Analysis'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            sast_shellcheck
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Provision CI k8s cluster'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            deploy_cluster
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Login to CI ACR Registry'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            login_cluster_registry
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Copy Deployed Dev Artifacts to CI'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            copy_upstream_to_cluster_k8s
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Push packaged Artifacts to CI'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            publish_packaged_chart_for_cluster
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Install latest umbrella chart to development k8s cluster'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            deploy_umbrella_chart_to_cluster
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
      - task: AzureCLI@2
        # condition: and(succeeded(), eq(variables['Build.SourceVersionMessage'], 'automated update of semver on git commit'))
        displayName: 'Purge CI k8s cluster'
        inputs:
          azureSubscription: $(BEDROCK_SUBSCRIPTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: >-
            DD_CLIENT_API_KEY=$(DD_CLIENT_API_KEY)
            DD_CLIENT_APP_KEY=$(DD_CLIENT_APP_KEY)
            BEDROCK_DEPLOYMENT_CATALOG=$(BEDROCK_DEPLOYMENT_CATALOG)
            BEDROCK_CLUSTER=$(BEDROCK_CLUSTER)
            BEDROCK_INVOKED_DIR=$(BEDROCK_INVOKED_DIR)
            ./ci/recipes/invoke_bedrock_recipe.sh
            purge_cluster
          # arguments:
          # scriptPath:
          # powerShellErrorActionPreference
          # addSpnToEnvironment
          # useGlobalConfig
          # workingDirectory
          # failOnStandardError
          # powerShellIgnoreLASTEXITCODE
