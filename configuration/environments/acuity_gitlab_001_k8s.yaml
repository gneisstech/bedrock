---
target:
  app: 'gitlab'
  env: '001'
  metadata:
    product_portfolio_name: &productName 'connected-facilities'
    environment_name: &environmentName '##env##'
    default_azure_location: &defaultAzureLocation 'eastus'
    default_azure_subscription: &defaultAzureSubscription '5649ad97-1fd3-460f-b569-9995bbb6c5c0'  # Acuity Brands, Inc. ConnectedFacilities-Dev
    tls_cert_subscription: &subscription_tls '5649ad97-1fd3-460f-b569-9995bbb6c5c0'  # Acuity Brands, Inc. ConnectedFacilities-Dev
    dns_subscription: &subscription_dns '5e49f516-d005-4ae8-a287-031c8573401c'  # Acuity Brands, Inc. Allspice-Dev
    service_deployment:
      tenant: &acuityDefaultTenant 'caadbe96-024e-4f67-82ec-fb28ff53d16d'  # Acuity Brands, Inc.
      authn_tenant: &environmentTenant 'common'  # allow all AD tenants to authenticate
      passage_api_fqdn: &passageApiFqdn 'passage.atrius-dev.acuitynext.io.'
    app_registration:
      tenant: &appRegistrationTenant 'db566806-bf04-4296-98cc-ba6d2d950788'  # Acuity Brands Technical Services, INC
      application_id: &appRegistrationID '3a6085d9-676a-473c-832f-b73b2b7f7561'  # Acuity Brands Atrius Dev UI
      passage_api_application_id: &passageApiApplicationID '24b765b5-8108-4374-8141-1a65c0fc42ab'  # Acuity Brands Atrius Passage API
      passage_api_environment: &passageApiEnvironment "ASP_DEV_US"
      # application_id: &appRegistrationID 'ca8318ee-a3f8-45d4-b284-0ec0ce809789'  # @@ TODO - manual setup due to insufficient permissions in AZ CLI
    k8s_namespace: &glNamespace 'gitlab'
    tags: &labels 'gl-env=##env## gl-role=##env##'
    tls_secret_name: &tlsSecretName 'wildcarddevatrius-iotcom'
  iaas:
    location: *defaultAzureLocation
    resource_groups:
      # for naming conventions, see: https://docs.acuitynext.net/wiki/azure-naming-conventions/
      # pre-existing Atrius resource groups with shared configuration state
      - name: &atriusDnsRG 'atriusops-allspicedev'
        action: 'read'
      # ##app-env## resource groups
      - name: &glWafRG 'Waf-##appenv##'
        action: 'create'
      - name: &glReposRG 'Repos-##appenv##'
        action: 'create'
      - name: &glAcrRG 'Acr-##appenv##'
        action: 'create'
      - name: &glKeysRG 'Kv-##appenv##'
        action: 'create'
      - name: &glK8sRG 'K8S-##appenv##'
        action: 'create'
    networking:
      public_ip:
        - name: &wafIP '##app-env##-waf-k8s-pip'
          resource_group: *glWafRG
          subscription: *defaultAzureSubscription
          arm_type: 'Microsoft.Network/publicIPAddresses'
          sku: 'Standard'
          allocation_method: 'Static'
          action: 'create'
      dns_a_records:
        - zone: &dnsZone 'dev.atrius-iot.com'
          host: &dnsHost '##app##-##env##'
          fqdn: &wafFqdn '##app-env##.dev.atrius-iot.com.'
          resource_group: *atriusDnsRG
          subscription: *subscription_dns
          a_record_ttl: 3600
          a_record_public_ip: *wafIP
          action: 'create'
        - zone: *dnsZone
          host: &gitlabHost 'gitlab'
          fqdn:
            - *gitlabHost
            - '.'
            - *dnsZone
          resource_group: *atriusDnsRG
          subscription: *subscription_dns
          a_record_ttl: 3600
          a_record_public_ip: *wafIP
          action: 'create'
        - zone: *dnsZone
          host: &registryHost 'registry'
          fqdn:
            - *registryHost
            - '.'
            - *dnsZone
          resource_group: *atriusDnsRG
          subscription: *subscription_dns
          a_record_ttl: 3600
          a_record_public_ip: *wafIP
          action: 'create'
        - zone: *dnsZone
          host: &minioHost 'minio'
          fqdn:
            - *minioHost
            - '.'
            - *dnsZone
          resource_group: *atriusDnsRG
          subscription: *subscription_dns
          a_record_ttl: 3600
          a_record_public_ip: *wafIP
          action: 'create'
  paas:
    location: *defaultAzureLocation
    keyvaults:
      # pre-existing Atrius key vault with shared configuration state such as TLS certificate
      - name: &tlsKvName 'atrius01kvbxkbdsepg6'
        action: 'read'
      # ##app-env## Key Vault
      - name: &kvName '##app-env##-master-kv'
        resource_group: *glKeysRG
        arm_type: 'Microsoft.KeyVault/vaults'
        soft_delete: 'false'
        action: 'create'
    service_principals:
      # for K8S to call Azure APIs
      - name: &spK8S '##app-env##-k8s-sp'
        key_vault:
          vault: *kvName
          resource_group: *glKeysRG
          secret_name: *spK8S
        role: 'Contributor'
        scopes:
          - '/subscriptions/'
          - *defaultAzureSubscription
          - '/resourceGroups/'
          - *glK8sRG
          - ' '
          - '/subscriptions/'
          - *defaultAzureSubscription
          - '/resourceGroups/'
          - *glWafRG
        action: 'create'
    container_registries:
      - name: &primaryACR 'acuitygitlabregistry'
        arm_type: 'Microsoft.ContainerRegistry/registries'
        resource_group: *glAcrRG
        uri: &uriPrimaryACR 'https://acuitygitlabregistry.azurecr.io'
        sku: 'Premium'
        admin_enabled: true
        action: 'create'
    k8s:
      clusters:
        - name: &glKubernetesClusterName '##app-env##-k8s'
          resource_group: *glK8sRG
          location: *defaultAzureLocation
          # aad_client_app_id:
          # aad_server_app_id:
          # aad_server_app_secret:
          aad_tenant_id: *environmentTenant
          admin_username: 'gitlab-admin-user'
          # api_server_authorized_ip_ranges: '0.0.0.0/32'
          attach_acr: *primaryACR
          client_secret:
            - '##secure_secret={"vault":"'
            - *kvName
            - '","secret_name":"'
            - *spK8S
            - '-secret'
            - '"}'
            - '##'
          enable_cluster_autoscaler: 'true'
          enable_managed_identity: 'false'
          enable_private_cluster: 'false'
          generate_ssh_keys: 'true'
          kubernetes_version: '1.18.8'
          load_balancer_sku: 'standard'
          max_count: 100
          max_pods: 30
          min_count: 3
          network_plugin: 'azure'
          network_policy: 'calico'
          node_count: 3
          node_osdisk_size: '60'
          node_vm_size: 'Standard_DS2_v2'
          nodepool_labels: *labels
          nodepool_name: 'gitlab001np'
          nodepool_tags: *labels
          service_principal:
            - '##secure_secret={"vault":"'
            - *kvName
            - '","secret_name":"'
            - *spK8S
            - '-app-id'
            - '"}'
            - '##'
          ssh_key_value: '~/.ssh/id_##app_env##_k8s.pub'
          tags: *labels
          vm_set_type: 'VirtualMachineScaleSets'
          zones: '1 2 3'
          subscription: *defaultAzureSubscription
          action: 'create'
      secrets:
        names:
          - &dataDogApiKeySecretName '##app-env##-datadog-api-key'
          - &neuvectorLicenseKeyName '##app-env##-neuvector-license-key'
        values:
          datadog_api_key: &datadogApiKey
            - '##secure_secret={"vault":"'
            - *kvName
            - '","secret_name":"'
            - *dataDogApiKeySecretName
            - '"}'
            - '##'
          neuvector_license_key: &neuvectorLicenseKey
            - '##secure_secret={"vault":"'
            - *kvName
            - '","secret_name":"'
            - *neuvectorLicenseKeyName
            - '"}'
            - '##'
      datadog:
        agents:
          rbac:
            create: true
          containers:
            agent:
              env:
                - name: 'DD_KUBELET_TLS_VERIFY'
                  value: 'false'
            systemProbe:
              env:
                - name: 'DD_KUBELET_TLS_VERIFY'
                  value: 'false'
            traceAgent:
              env:
                - name: 'DD_KUBELET_TLS_VERIFY'
                  value: 'false'
            processAgent:
              env:
                - name: 'DD_KUBELET_TLS_VERIFY'
                  value: 'false'
        clusterChecksRunner:
          env:
            - name: 'DD_KUBELET_TLS_VERIFY'
              value: 'false'
          rbac:
            create: true
        datadog:
          apiKey: *datadogApiKey
          leaderElection: true
          collectEvents: true
          clusterAgent:
            enabled: true
            clusterAgent:
              metricsProvider:
                enabled: true
          clusterChecks:
            enabled: false
          dogstatsd:
            port: 8125
            useHostPort: true
            nonLocalTraffic: true
          kubeStateMetricsEnabled: true
          logs:
            enabled: true
            containerCollectAll: true
            containerCollectUsingFiles: false
          env:
            - name: 'DD_KUBELET_TLS_VERIFY'
              value: 'false'
        clusterAgent:
          rbac:
            create: true
        kube-state-metrics:
          rbac:
            create: true
          collectors:
            verticalpodautoscalers: null
    # storage accounts - for data that must persist longer than a cluster lifetime (survives cluster rebuild)
    storage:
      accounts:
        - name: &sa001name 'abl02##appenv##sa'
          resource_group: &k8sMcResourceGroup 'MC_K8S-gitlab001_gitlab-001-k8s_eastus'
          location: *defaultAzureLocation
          encryption_services: 'file'
          https_only: true
          kind: 'StorageV2'
          sku: 'Standard_ZRS'
          tags: *labels
          arm_type: 'Microsoft.Storage/storageAccounts'
          action: 'create'
      # azure disks - for data that must persist longer than a cluster lifetime (survives cluster rebuild)
      azure_disks:
        - name: &prometheusDisk 'gitlab-prometheus'
          resource_group: *k8sMcResourceGroup
          location: *defaultAzureLocation
          os_type: 'Linux'
          size_gb: &prometheusGB '32'
          encryption_type: 'EncryptionAtRestWithPlatformKey'
          sku: 'Premium_LRS'
          tags: 'cf-env=gl##env## cf-role=gl##env##'
          k8s_volume_data:
            capacity:
              storage:
                - *prometheusGB
                - 'Gi'
            accessModes:
              - 'ReadWriteOnce'
            azureDisk:
              cachingMode: 'ReadOnly'
              diskName: *prometheusDisk
              diskURI:
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *k8sMcResourceGroup
                - '/providers/Microsoft.Compute/disks/'
                - *prometheusDisk
              fsType: ''
              kind: 'Managed'
              readOnly: false
            persistentVolumeReclaimPolicy: 'Retain'
            storageClassName: 'gitlab-prometheus-state'
            volumeMode: 'Filesystem'
          action: 'create'
        - name: &gitalyDisk 'gitlab-gitaly'
          resource_group: *k8sMcResourceGroup
          location: *defaultAzureLocation
          os_type: 'Linux'
          size_gb: &gitalyGB '300'
          encryption_type: 'EncryptionAtRestWithPlatformKey'
          sku: 'Premium_LRS'
          tags: 'cf-env=gl##env## cf-role=gl##env##'
          k8s_volume_data:
            capacity:
              storage:
                - *gitalyGB
                - 'Gi'
            accessModes:
              - 'ReadWriteOnce'
            azureDisk:
              cachingMode: 'ReadOnly'
              diskName: *gitalyDisk
              diskURI:
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *k8sMcResourceGroup
                - '/providers/Microsoft.Compute/disks/'
                - *gitalyDisk
              fsType: ''
              kind: 'Managed'
              readOnly: false
            persistentVolumeReclaimPolicy: 'Retain'
            storageClassName: 'gitlab-gitaly-state'
            volumeMode: 'Filesystem'
          action: 'create'
        - name: &redisDisk 'gitlab-redis'
          resource_group: *k8sMcResourceGroup
          location: *defaultAzureLocation
          os_type: 'Linux'
          size_gb: &redisGB '32'
          encryption_type: 'EncryptionAtRestWithPlatformKey'
          sku: 'Premium_LRS'
          tags: 'cf-env=gl##env## cf-role=gl##env##'
          k8s_volume_data:
            capacity:
              storage:
                - *redisGB
                - 'Gi'
            accessModes:
              - 'ReadWriteOnce'
            azureDisk:
              cachingMode: 'ReadOnly'
              diskName: *redisDisk
              diskURI:
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *k8sMcResourceGroup
                - '/providers/Microsoft.Compute/disks/'
                - *redisDisk
              fsType: ''
              kind: 'Managed'
              readOnly: false
            persistentVolumeReclaimPolicy: 'Retain'
            storageClassName: 'gitlab-redis-state'
            volumeMode: 'Filesystem'
          action: 'create'
        - name: &postgresqlDisk 'gitlab-postgresql'
          resource_group: *k8sMcResourceGroup
          location: *defaultAzureLocation
          os_type: 'Linux'
          size_gb: &postgresqlGB '64'
          encryption_type: 'EncryptionAtRestWithPlatformKey'
          sku: 'Premium_LRS'
          tags: 'cf-env=gl##env## cf-role=gl##env##'
          k8s_volume_data:
            capacity:
              storage:
                - *postgresqlGB
                - 'Gi'
            accessModes:
              - 'ReadWriteOnce'
            azureDisk:
              cachingMode: 'ReadOnly'
              diskName: *postgresqlDisk
              diskURI:
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *k8sMcResourceGroup
                - '/providers/Microsoft.Compute/disks/'
                - *postgresqlDisk
              fsType: ''
              kind: 'Managed'
              readOnly: false
            persistentVolumeReclaimPolicy: 'Retain'
            storageClassName: 'gitlab-postgresql-state'
            volumeMode: 'Filesystem'
          action: 'create'
        - name: &minioDisk 'gitlab-minio'
          resource_group: *k8sMcResourceGroup
          location: *defaultAzureLocation
          os_type: 'Linux'
          size_gb: &minioGB '300'
          encryption_type: 'EncryptionAtRestWithPlatformKey'
          sku: 'Premium_LRS'
          tags: 'cf-env=gl##env## cf-role=gl##env##'
          k8s_volume_data:
            capacity:
              storage:
                - *minioGB
                - 'Gi'
            accessModes:
              - 'ReadWriteOnce'
            azureDisk:
              cachingMode: 'ReadOnly'
              diskName: *minioDisk
              diskURI:
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *k8sMcResourceGroup
                - '/providers/Microsoft.Compute/disks/'
                - *minioDisk
              fsType: ''
              kind: 'Managed'
              readOnly: false
            persistentVolumeReclaimPolicy: 'Retain'
            storageClassName: 'gitlab-minio-state'
            volumeMode: 'Filesystem'
          action: 'create'
      # azure files - for data that must persist longer than a cluster lifetime (survives cluster rebuild)
      azure_files:
        - name: 'gitlab-prometheus-server'
          quota: '32'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
        - name: 'gitlab-gitaly'
          quota: '300'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
        - name: 'gitlab-redis'
          quota: '32'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
        - name: 'gitlab-postgresql'
          quota: '64'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
        - name: 'gitlab-minio'
          quota: '300'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
      # blob store - for data that must persist longer than a cluster lifetime (survives cluster rebuild)
      blob_store:
        - name: &gitlabBlobContainerName 'gitlab-blob-storage'
          storage_account_name: *sa001name
          metadata: 'cf-env=gl##env## cf-role=gl##env##'
          action: 'create'
  saas:
    helm:
      default_values:
        passage:
          api:
            application_id: *passageApiApplicationID
            fqdn: *passageApiFqdn
            url: &passageApiUrl 'https://passage.atrius-dev.acuitynext.io/api/v1'
            relayUrl: &relayApiUrl 'https://passage.atrius-dev.acuitynext.io/api/v1/Devices'
            host: &passageHost 'passage.atrius-dev.acuitynext.io'
          partner:
            env: &passagePartnerEnv 'DEV'
        secrets:
          names:
            - &wafTLSSecret 'waf-tls-secret'
      service_values:
        tls_secrets:
        certmanager-issuer:
          email: 'techguru@byiq.com'
        gitlab:
          xx-gitaly:
            persistence:
              storageClass: 'manual-gitlab-gitaly'
              accessMode: 'ReadWriteMany'
        global:
          hosts:
            domain: 'dev.atrius-iot.com'
            externalIP:
              - '##ip_address={"ip_resource_id":"'
              - '/subscriptions/'
              - *defaultAzureSubscription
              - '/resourceGroups/'
              - *glWafRG
              - '/providers/Microsoft.Network/publicIPAddresses/'
              - *wafIP
              - '"}'
              - '##'
          grafana:
            enabled: true
        xx-minio:
          persistence:
            storageClass: 'manual-gitlab-minio'
            accessMode: 'ReadWriteMany'
        nginx-ingress:
          controller:
            service:
              loadBalancerIP:
                - '##ip_address={"ip_resource_id":"'
                - '/subscriptions/'
                - *defaultAzureSubscription
                - '/resourceGroups/'
                - *glWafRG
                - '/providers/Microsoft.Network/publicIPAddresses/'
                - *wafIP
                - '"}'
                - '##'
              annotations:
                'service.beta.kubernetes.io/azure-load-balancer-resource-group': *glWafRG
        postgresql:
          securityContext:
            enabled: false
          volumePermissions:
            enabled: true
          xx-global:
            storageClass: 'manual-gitlab-postgresql'
          persistence:
            accessModes:
              - 'ReadWriteMany'
            existingClaim:
              'gl-az-files-gitlab-postgresql-state-gitlab-pvc'
        xx-prometheus:
          alertmanager:
            persistentVolume:
              storageClass: 'manual-gitlab-prometheus-server'
              accessModes:
                - 'ReadWriteMany'
          pushgateway:
            persistentVolume:
              storageClass: 'manual-gitlab-prometheus-server'
              accessModes:
                - 'ReadWriteMany'
          server:
            persistentVolume:
              storageClass: 'manual-gitlab-prometheus-server'
              accessModes:
                - 'ReadWriteMany'
        xx-redis:
          global:
            storageClass: 'manual-gitlab-redis'
          master:
            persistence:
              accessModes:
                - 'ReadWriteMany'
          slave:
            persistence:
              accessModes:
                - 'ReadWriteMany'
