# Default values for cf-deployment-umbrella.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

default_values:
  rails:
    env: &railsEnv
      RAILS_ENV: 'production'
      RAILS_LOG_TO_STDOUT: 'true'
  passage:
    api:
      application_id: &passageApiApplicationID '24b765b5-8108-4374-8141-1a65c0fc42ab'  # Acuity Brands Atrius Dev Passage API
      fqdn: &passageApiFqdn 'passage.atrius-dev.acuitynext.io.'
      url: &passageApiUrl 'https://passage.atrius-dev.acuitynext.io/api/v1'
      relayUrl: &relayApiUrl 'https://passage.atrius-dev.acuitynext.io/api/v1/Devices'
      host: &passageHost 'passage.atrius-dev.acuitynext.io'
    partner:
      env: &passagePartnerEnv 'DEV'
  jwt:
    issuers: &trustedIdProviders "\
      https://sts.windows.net/caadbe96-024e-4f67-82ec-fb28ff53d16d/\
      =\
      https://management.core.windows.net/\
      ,\
      https://sts.windows.net/db566806-bf04-4296-98cc-ba6d2d950788/\
      =\
      https://management.core.windows.net/\
      ,\
      https://sts.windows.net/f687c0f3-9126-45bd-b994-b96df8a19c91/\
      =\
      https://management.core.windows.net/\
      ,\
      https://sts.windows.net/caadbe96-024e-4f67-82ec-fb28ff53d16d/\
      =\
      https://graph.windows.net\
      ,\
      https://sts.windows.net/db566806-bf04-4296-98cc-ba6d2d950788/\
      =\
      https://graph.windows.net\
      ,\
      https://sts.windows.net/f687c0f3-9126-45bd-b994-b96df8a19c91/\
      =\
      https://graph.windows.net\
      ,\
      https://sts.windows.net/caadbe96-024e-4f67-82ec-fb28ff53d16d/\
      =\
      24b765b5-8108-4374-8141-1a65c0fc42ab"
  atrius_objects:
    api_key: &atriusObjectsApiKey 'fixme-dummy-developer-key'
    authorized_users: &atriusObjectsAuthorizedUsers "\
      36bc7f6b-2161-415c-a00e-4332b59aaa99\
      ,\
      ff85ea71-79b8-48a1-b65b-ce0a38b87dbd"
    api_url:
      objects: &objectsApiUrl 'http://cf-atrius-objects-api-docker/cf-atrius-objects'
      lights_map: &lightsMapApiUrl 'http://cf-atrius-objects-api-docker/cf-lights-map'
  db:
    password:
      atrius: &dbPasswordAtrius 'too2Simple'
      linux: &dbPasswordLinux 'too2Simple'
    url:
      admin: &dbUrlAdmin 'sqlserver:/sa:too2Simple@cf-mssql-linux:1433/cf-dev-admin-db?azure='
      atrius: &dbUrlAtrius 'sqlserver://sa:too2Simple@cf-mssql-atrius:1433/allspice-mapmanager01db?encrypt=disable'
      authz: &dbUrlAuthZ 'sqlserver://sa:too2Simple@cf-mssql-linux:1433/cf-dev-authz-db?azure='
      elm: &dbUrlElm 'sqlserver://sa:too2Simple@cf-mssql-linux:1433/cf-dev-elm-db?azure='
      network_view: &dbUrlNetworkView 'sqlserver://sa:too2Simple@cf-mssql-linux:1433/cf-dev-network-view-db?azure='
      self_healing: &dbUrlSelfHealing "\
        DRIVER={FreeTDS};\
        SERVER=cf-mssql-linux;\
        DATABASE=cf-dev-self-healing;\
        UID=sa;\
        PWD=too2Simple;\
        PORT=1433"
  secret_key_base:
    admin: &secretKeyBaseAdmin 'fixme-secret1'
    authz: &secretKeyBaseAuthZ 'fixme-secret2'
    elm: &secretKeyBaseElm 'fixme-secret3'
    network_view: &secretKeyBaseNetworkView 'fixme-secret4'
  authz:
    api_url: &authzApiUrl 'http://cf-authz-web-api-docker/cf-authz'
  elm:
    api_url: &elmApiUrl '/cf-elm/api/v1/light-groups/published-light-groups'
    passage:
      api_url:
        passage: *passageApiUrl
        relay: *relayApiUrl
      partner_env: *passagePartnerEnv
      referer: &passageReferer 'https://cf.us.atrius-iot.com'
      host: *passageHost
    service_principal:
      client_id: &servicePrincipalClientId ''
      tenant_id: &servicePrincipalTenantId ''
      resource: &servicePrincipalResource ''
      secret: &servicePrincipalSecret ''
  self_healing:
    api_key: &selfHealingApiKey 'fixme-dummy-developer-key'
    api_url:
      prefix: &urlPrefixSelfHealing '/cf-self-healing-api/api/v1'

cf-http-https-echo:
  fullnameOverride: 'cf-http-https-echo'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-echo/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
        more_set_headers "Content-Security-Policy: base-uri 'self'; default-src * 'self' data: 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self' login.microsoft.com;" always;
    hosts:
      - paths:
          - '/cf-echo(/|$)(.*)'

cf-oauth-proxy-docker:
  fullnameOverride: 'cf-oauth-proxy-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/oauth2/$2'
    hosts:
      - paths:
          - '/oauth2(/|$)(.*)'
  config:
    environment:
      OAUTH2_PROXY_AZURE_TENANT: 'common'
      OAUTH2_PROXY_CLIENT_ID: 'fixme-oauth-sp-client-id'
      OAUTH2_PROXY_COOKIE_EXPIRE: '4320h'
      OAUTH2_PROXY_COOKIE_NAME: 'ConnectedFacilities_AUTHN_cf_auth__utm'
      OAUTH2_PROXY_COOKIE_PATH: '/'
      OAUTH2_PROXY_COOKIE_REFRESH: '1h'
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_EXTRA_JWT_ISSUERS: 'fixme-oauth-jwt-id-providers'
      OAUTH2_PROXY_HTTP_ADDRESS: '0.0.0.0:4180'
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: 'true'
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: 'true'
      OAUTH2_PROXY_PING_PATH: '/'
      OAUTH2_PROXY_PROVIDER: 'azure'
      OAUTH2_PROXY_REDIRECT_URL: 'fixme-oauth-redirect-url'
      OAUTH2_PROXY_RESOURCE: 'fixme-oauth-proxy-resource'
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: 'true'
      OAUTH2_PROXY_SILENCE_PING_LOGGING: 'true'
      OAUTH2_PROXY_SKIP_AUTH_REGEX: 'fixme-oauth-skip-auth-regex'
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: 'true'
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: 'true'
      OAUTH2_PROXY_UPSTREAMS: ''  # deliberately empty
    secrets:
      OAUTH2_PROXY_CLIENT_SECRET: 'fixme-oauth-proxy-client-secret'
      OAUTH2_PROXY_COOKIE_SECRET: 'fixme-oauth-proxy-cookie-secret'

cf-react-app-docker:
  fullnameOverride: 'cf-react-app-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-app/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
        more_set_headers "Content-Security-Policy: base-uri 'self'; default-src * 'self' data: 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self' login.microsoft.com;" always;
    hosts:
      - paths:
          - '/cf-app(/|$)(.*)'

cf-self-healing-app-docker:
  fullnameOverride: 'cf-self-healing-app-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-self-healing/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
        more_set_headers "Content-Security-Policy: base-uri 'self'; default-src * 'self' data: 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self' login.microsoft.com;" always;
    hosts:
      - paths:
          - '/cf-self-healing(/|$)(.*)'

cf-atrius-objects-api-docker:
  fullnameOverride: 'cf-atrius-objects-api-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-atrius-objects/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-atrius-objects(/|$)(.*)'
  config:
    environment:
      AUTHORIZED_USERS: *atriusObjectsAuthorizedUsers
      ELM_LIGHTS_GROUPS_API_URL: *elmApiUrl
      JWT_ISSUERS: *trustedIdProviders
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
      SERVICE_PRINCIPAL_RESOURCE: *servicePrincipalResource
    secrets:
      CUSTOMCONNSTR_CF_DISTECH_LIGHTSMAP_API_KEY: *atriusObjectsApiKey
      CUSTOMCONNSTR_DATABASE_URLS: *dbUrlAtrius
      CUSTOMCONNSTR_SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret

cf-lights-map-api-docker:
  fullnameOverride: 'cf-lights-map-api-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-lights-map/$2'
    hosts:
      - paths:
          - '/cf-lights-map(/|$)(.*)'
  config:
    environment:
      AUTHORIZED_USERS: *atriusObjectsAuthorizedUsers
      ELM_LIGHTS_GROUPS_API_URL: *elmApiUrl
      JWT_ISSUERS: *trustedIdProviders
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
      SERVICE_PRINCIPAL_RESOURCE: *servicePrincipalResource
    secrets:
      CUSTOMCONNSTR_CF_DISTECH_LIGHTSMAP_API_KEY: *atriusObjectsApiKey
      CUSTOMCONNSTR_DATABASE_URLS: *dbUrlAtrius
      CUSTOMCONNSTR_SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret

cf-self-healing-api-docker:
  fullnameOverride: 'cf-self-healing-api-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-self-healing-api/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-self-healing-api(/|$)(api/v1/update_app_settings.*)'
          - '/cf-self-healing-api(/|$)(api/v1/get_sites.*)'
          - '/cf-self-healing-api(/|$)(api/v1/get_latest_record/.*)'
          - '/cf-self-healing-api(/|$)(api/v1/get_records/.*)'
          - '/cf-self-healing-api(/|$)(api/v1/update_approval.*)'
          - '/cf-self-healing-api(/|$)(api/v1/get_stats/.*)'
  config:
    environment:
      JWT_ISSUERS: *trustedIdProviders
      URL_PREFIX: *urlPrefixSelfHealing
    secrets:
      DATABASE_CONN_STRING: *dbUrlSelfHealing
      API_KEY: *selfHealingApiKey

cf-self-healing-ingest-api-docker:
  fullnameOverride: 'cf-self-healing-ingest-api-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-self-healing-api/$2'
      'nginx.ingress.kubernetes.io/client-body-buffer-size': '2M'
      'nginx.ingress.kubernetes.io/proxy-body-size': '2M'
    hosts:
      - paths:
          - '/cf-self-healing-api(/|$)(api/v1/process.*)'
  config:
    environment:
      JWT_ISSUERS: *trustedIdProviders
      URL_PREFIX: *urlPrefixSelfHealing
    secrets:
      DATABASE_CONN_STRING: *dbUrlSelfHealing
      API_KEY: *selfHealingApiKey

cf-authz-web-api-docker:
  fullnameOverride: 'cf-authz-web-api-docker'
  enabled: true
  config_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/resource-policy": keep
    "helm.sh/hook-weight": "-1"
  migration_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-authz/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-authz(/|$)(.*)'
  config:
    environment:
      <<: *railsEnv
      JWT_ISSUERS: *trustedIdProviders
      PASSAGE_API_URL: *passageApiUrl
      PASSAGE_REFERER: *passageReferer
      PASSAGE_HOST: *passageHost
    secrets:
      DATABASE_URL: *dbUrlAuthZ
      SECRET_KEY_BASE: *secretKeyBaseAuthZ

cf-elm-web-api-docker:
  fullnameOverride: 'cf-elm-web-api-docker'
  enabled: true
  config_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/resource-policy": keep
    "helm.sh/hook-weight": "-1"
  migration_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-elm/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-elm(/|$)(.*)'
  config:
    environment:
      <<: *railsEnv
      RELAY_API_URL: *relayApiUrl
      PASSAGE_API_URL: *passageApiUrl
      PASSAGE_REFERER: *passageReferer
      PASSAGE_HOST: *passageHost
      CF_AUTHZ_API_URL: *authzApiUrl
      CF_OBJECTS_API_URL: *objectsApiUrl
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
    secrets:
      DATABASE_URL: *dbUrlElm
      SECRET_KEY_BASE: *secretKeyBaseElm
      CUSTOMCONNSTR_SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret

cf-admin-web-api-docker:
  fullnameOverride: 'cf-admin-web-api-docker'
  enabled: true
  config_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/resource-policy": keep
    "helm.sh/hook-weight": "-1"
  migration_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-admin/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-admin(/|$)(.*)'
  config:
    environment:
      <<: *railsEnv
      CF_AUTHZ_API_URL: *authzApiUrl
    secrets:
      DATABASE_URL: *dbUrlAdmin
      SECRET_KEY_BASE: *secretKeyBaseAdmin

cf-ingest-web-api:
  fullnameOverride: 'cf-ingest-web-api'
  enabled: true
  config_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/resource-policy": keep
    "helm.sh/hook-weight": "-1"
  migration_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-ingest/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
      'nginx.ingress.kubernetes.io/client-body-buffer-size': '2M'
      'nginx.ingress.kubernetes.io/proxy-body-size': '2M'
    hosts:
      - paths:
          - '/cf-ingest(/|$)(.*)'
  config: &configNetworkView
    environment:
      <<: *railsEnv
      CF_AUTHZ_API_URL: *authzApiUrl
    secrets:
      DATABASE_URL: *dbUrlNetworkView
      SECRET_KEY_BASE: *secretKeyBaseNetworkView

cf-health-web-api:
  fullnameOverride: 'cf-health-web-api'
  enabled: true
  config_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/resource-policy": keep
    "helm.sh/hook-weight": "-1"
  migration_annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-health/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-health(/|$)(.*)'
  config:
    <<: *configNetworkView

cf-mssql-linux:
  fullnameOverride: 'cf-mssql-linux'
  enabled: true
  sapassword: *dbPasswordLinux

cf-mssql-atrius:
  fullnameOverride: 'cf-mssql-atrius'
  enabled: true
  sapassword: *dbPasswordAtrius

cf-sql-server:
  fullnameOverride: 'cf-sql-server'
  enabled: true

cf-sql-server-atrius:
  fullnameOverride: 'cf-sql-server-atrius'
  enabled: true

cf-waf-ingress-default-backend:
  fullnameOverride: 'cf-waf-ingress-default-backend'
  enabled: true

cf-smoketest-svc-docker:
  fullnameOverride: 'cf-smoketest-svc-docker'
  enabled: true
  config:
    # placeholder values should allow the service to install and minimally respond
    environment:
      TEST_HOST_URL: '127.0.0.1'
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
      SERVICE_PRINCIPAL_RESOURCE: *servicePrincipalResource
      APP_VERSION: '{{ .Chart.AppVersion }}'
    secrets:
      JWT_AUTH_TOKEN: ''
      CF_DISTECH_LIGHTSMAP_API_KEY: *atriusObjectsApiKey
      CF_SELF_HEALING_API_KEY: *selfHealingApiKey
      SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret

cf-assets-v2-telemetry-svc-docker:
  fullnameOverride: 'cf-assets-v2-telemetry-svc-docker'
  enabled: true
  config:
    # placeholder values should allow the service to install and minimally respond
    environment:
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
      SERVICE_PRINCIPAL_RESOURCE: *servicePrincipalResource
      APP_VERSION: '{{ .Chart.AppVersion }}'
    secrets:
      SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret
      TELEMETRY_EH_CG_ASSETS_V2_INGEST_CONNECTION_STRING: ''
      TELEMETRY_EH_BAKED_ASSETS_V2_PUBLISH_CONNECTION_STRING: ''

cf-tls-certificate-manager-svc-docker:
  fullnameOverride: 'cf-tls-certificate-manager-svc-docker'
  enabled: true
  yaml_values:
    - &leCertificateDir '/etc/letsencrypt'
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'false'
      'nginx.ingress.kubernetes.io/rewrite-target': '/.well-known/$2'
    hosts:
      - paths:
          - '/.well-known(/|$)(.*)'
  rbac:
    create: true
  config:
    environment:
      ACTIVE_TLS_PUBLISH: 'false'
      ADMIN_EMAIL: 'techguru@byiq.com'
      APP_VERSION: '{{ .Chart.AppVersion }}'
      CERTIFICATE_CREATED_FLAG: 'fixme-certificate-created-flag'
      CERTIFICATE_DIR: *leCertificateDir
      CERTIFICATE_NAME: '{{ .Release.Name }}'
      CERTIFICATE_ORG: 'Acuity Brands, Inc.'
      DEV_CERTIFICATE_DIR: 'fixme-dev-certificate-dir'
      DEVELOPER_CERTIFICATE_REQUIRED_FLAG: 'fixme-developer-certificate-required-flag'
      HOST_DOMAIN: 'fixme-missing-host-domain'
      IS_PRODUCTION: 'false'
      METRICS_PREFIX: 'cf.service.cf_tls_certificate_manager.'
      PRIVATE_TLS: 'true'
      RELEASE_NAME: '{{ .Release.Name }}'
      RELEASE_NAMESPACE: '{{ .Release.Namespace }}'
      RENEWAL_FAILED_FLAG: 'fixme-renewal-failed-flag'
      TLS_SECRET_NAME: 'fixme-missing-tls-secret-name'
    secrets:
      TLS_PEM: 'fixme-missing-tls-pem-secret'

cf-coordinate-transforms-svc-docker:
  fullnameOverride: 'cf-coordinate-transforms-svc-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-coordinate-transforms/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-coordinate-transforms(/|$)(.*)'
  config:
    # placeholder values should allow the service to install and minimally respond
    environment:
      APP_VERSION: '{{ .Chart.AppVersion }}'

cf-city-state-zip-svc-docker:
  fullnameOverride:  'cf-city-state-zip-svc-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-city-state-zip/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-city-state-zip(/|$)(.*)'
  config:
    # placeholder values should allow the service to install and minimally respond
    environment:
      APP_VERSION: '{{ .Chart.AppVersion }}'

cf-ecy-ingest-svc-docker:
  fullnameOverride: 'cf-ecy-ingest-svc-docker'
  enabled: true
  ingress:
    enabled: true
    annotations:
      'nginx.ingress.kubernetes.io/force-ssl-redirect': 'true'
      'nginx.ingress.kubernetes.io/rewrite-target': '/cf-ecy-ingest/$2'
      'nginx.ingress.kubernetes.io/auth-url': "https://$host/oauth2/auth"
      'nginx.ingress.kubernetes.io/auth-signin': "https://$host/oauth2/start?rd=$escaped_request_uri"
      'nginx.ingress.kubernetes.io/configuration-snippet': |
        auth_request_set $access_token $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Forwarded-Access-Token $access_token;
    hosts:
      - paths:
          - '/cf-ecy-ingest(/|$)(.*)'
  config:
    # placeholder values should allow the service to install and minimally respond
    environment:
      SERVICE_PRINCIPAL_CLIENT_ID: *servicePrincipalClientId
      SERVICE_PRINCIPAL_TENANT_ID: *servicePrincipalTenantId
      SERVICE_PRINCIPAL_RESOURCE: *servicePrincipalResource
      APP_VERSION: '{{ .Chart.AppVersion }}'
    secrets:
      JWT_AUTH_TOKEN: ''
      SERVICE_PRINCIPAL_SECRET: *servicePrincipalSecret

cf-waf-ingress:
  fullnameOverride: 'cf-waf-ingress'
  enabled: true
  rbac:
    scope: true
  controller:
    scope:
      enabled: true
    # config:
    addHeaders:
      'Strict-Transport-Security': 'max-age=31536000'
      'Referrer-Policy': 'strict-origin-when-cross-origin'
      'X-Frame-Options': 'sameorigin'
      'Content-Security-Policy': "default-src 'self'; frame-ancestors 'self' login.microsoft.com;"
      'Feature-Policy': >-
        accelerometer 'none';
        ambient-light-sensor 'none';
        autoplay 'none';
        battery 'none';
        camera 'none';
        display-capture 'none';
        document-domain 'none';
        encrypted-media 'none';
        execution-while-not-rendered 'none';
        execution-while-out-of-viewport 'none';
        fullscreen 'none';
        geolocation 'none';
        gyroscope 'none';
        layout-animations 'none';
        legacy-image-formats 'none';
        magnetometer 'none';
        microphone 'none';
        midi 'none';
        oversized-images 'none';
        payment 'none';
        picture-in-picture 'none';
        speaker 'none';
        sync-xhr 'none';
        unoptimized-images 'none';
        unsized-media 'none';
        usb 'none';
        vibrate 'none';
        vr 'none';
        wake-lock 'none';
        webauthn 'none';
        vr 'none';
        xr-spatial-tracking 'none';
        xr 'none';
      'X-Content-Type-Options': 'nosniff'
      'Server': ''  # TODO: delete server header from upstream
      'Access-Control-Allow-Origin': 'https://login.microsoftonline.com'
