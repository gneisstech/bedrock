---
target:
  metadata:
    product_portfolio_name: &productName 'connected-facilities'
    environment_name: &environmentName 'QA'
    default_azure_location: &defaultAzureLocation 'eastus'
    default_azure_subscription: &defaultAzureSubscription '781c62dc-1612-43e6-a0ca-a8138888691f'  # Acuity Brands, Inc. ConnectedFacilities-QA
    tls_cert_subscription: &subscription_tls 'a98f27b5-367a-44b6-af72-26fab4efc5f7'  # Acuity Brands, Inc. Allspice-QA
    dns_subscription: &subscription_dns 'a98f27b5-367a-44b6-af72-26fab4efc5f7'  # Acuity Brands, Inc. Allspice-QA
    service_deployment:
      tenant: &environmentTenant 'caadbe96-024e-4f67-82ec-fb28ff53d16d'  # Acuity Brands, Inc.
    app_registration:
      tenant: &appRegistrationTenant 'db566806-bf04-4296-98cc-ba6d2d950788'  # Acuity Brands Technical Services, INC
      # application_id: &appRegistrationID '5aa2313f-7a76-4d43-9dc4-612ab69ef306'  # Acuity Brands Atrius QA UI
      application_id: &appRegistrationID 'ca8318ee-a3f8-45d4-b284-0ec0ce809789'  # @@ TODO - manual setup due to insufficient permissions in AZ CLI
  iaas:
    location: *defaultAzureLocation
    resource_groups:
      # for naming conventions, see: https://docs.acuitynext.net/wiki/azure-naming-conventions/
      # pre-existing Atrius resource groups with shared configuration state
      - name: &atriusDnsRG 'atriusops-allspiceqa'
        action: 'read'
      # CF QA resource groups
      - name: &cfWafRG 'Waf-CfQA'
        action: 'create'
      - name: &cfDbRG 'Data-CfQA'
        action: 'create'
      - name: &cfKeysRG 'Kv-CfQA'
        action: 'create'
      - name: &cfAcrRG 'Acr-CfQA'
        action: 'create'
      - name: &cfNetworksRG 'Vnet-CfQA'
        action: 'create'
      - name: &cfAppSvcRG 'Web-CfQA'
        action: 'create'
      - name: &cfAuthNSvcRG 'Authn-CfQA'
        action: 'create'
    networking:
      public_ip:
        - name: &wafIP 'cf-qa-waf-pip'
          resource_group: *cfWafRG
          subscription: *defaultAzureSubscription
          arm_type: 'Microsoft.Network/publicIPAddresses'
          sku: 'Standard'
          allocation_method: 'Static'
          action: 'create'
        - name: &postAuthnIP 'cf-qa-post-auth-pip'
          resource_group: *cfAuthNSvcRG
          subscription: *defaultAzureSubscription
          arm_type: 'Microsoft.Network/publicIPAddresses'
          sku: 'Basic'
          allocation_method: 'Dynamic'
          action: 'create'
      dns_a_records:
        - zone: &dnsZone 'qa.atrius-iot.com'
          host: &dnsHost 'cf'
          fqdn: 'cf.qa.atrius-iot.com.'
          resource_group: *atriusDnsRG
          subscription: *subscription_dns
          a_record_ttl: 3600
          a_record_public_ip: *wafIP
          action: 'create'
      vnets:
        - name: 'cf-qa-vnet'
          resource_group: *cfNetworksRG
          cidr: '10.1.0.0/16'
          arm_type: 'Microsoft.Network/virtualNetworks'
          action: 'create'
          subnets:
            - name: 'cf-qa-0-subnet'
              cidr: '10.1.0.0/24'
            - name: 'cf-qa-1-subnet'
              cidr: '10.1.1.0/24'
  paas:
    location: *defaultAzureLocation
    keyvaults:
      # pre-existing Atrius key vault with shared configuration state such as TLS certificate
      - name: &atriusKVName 'atrius01kvjyfjczwcoo'
        action: 'read'
      # CF QA Key Vault
      - name: &kvName 'cf-qa-master-kv'
        resource_group: *cfKeysRG
        arm_type: 'Microsoft.KeyVault/vaults'
        action: 'create'
    databases:
      servers:
        - name: &cfDefaultDbServer 'cf-qa-sqls'
          arm_type: 'Microsoft.Sql/servers'
          resource_group: *cfDbRG
          admin_name: &cfDefaultDBAdminName 'cf-qa-sqls-admin-user'
          admin_password_kv:
            vault: *kvName
            resource_group: *cfKeysRG
            secret_name: &cfDefaultDBSecretName 'admin-pw-for-cf-qa-sqls'
          default_firewall_rule:
            name: 'AllowAllWindowsAzureIps'
            arm_type: 'Microsoft.Sql/servers/firewallRules'
            start_ip_address: '0.0.0.0'
            end_ip_address: '0.0.0.0'
          action: 'preserve'
      instances:
        - name: &selfHealingSchema 'cf-qa-self-healing'
          arm_type: 'Microsoft.Sql/servers/databases'
          resource_group: *cfDbRG
          server: *cfDefaultDbServer
          license_type: 'LicenseIncluded'
          max_size: '100GB'
          zone_redundant: false
          catalog_collation: 'SQL_Latin1_General_CP1_CI_AS'
          collation: 'SQL_Latin1_General_CP1_CI_AS'
          capacity: 2
          tier: 'GeneralPurpose'
          family: 'Gen5'
          service_objective: 'GP_Gen5_2'
          action: 'preserve'
        - name: &healthSchema 'cf-qa-twin01-db'
          arm_type: 'Microsoft.Sql/servers/databases'
          resource_group: *cfDbRG
          server: *cfDefaultDbServer
          license_type: 'LicenseIncluded'
          max_size: '100GB'
          zone_redundant: false
          catalog_collation: 'SQL_Latin1_General_CP1_CI_AS'
          collation: 'SQL_Latin1_General_CP1_CI_AS'
          capacity: 2
          tier: 'GeneralPurpose'
          family: 'Gen5'
          service_objective: 'GP_Gen5_2'
          action: 'preserve'
        - name: 'master'
          arm_type: 'Microsoft.Sql/servers/databases'
          resource_group: *cfDbRG
          server: *cfDefaultDbServer
          license_type: 'LicenseIncluded'
          max_size: '100GB'
          zone_redundant: false
          catalog_collation: 'SQL_Latin1_General_CP1_CI_AS'
          collation: 'SQL_Latin1_General_CP1_CI_AS'
          capacity: 2
          tier: 'GeneralPurpose'
          family: 'Gen5'
          service_objective: 'GP_Gen5_2'
          action: 'preserve'
    server_farms:
      - name: &authServiceFarm 'cf-qa-authservice-asp'
        arm_type: 'Microsoft.Web/serverFarms'
        resource_group: *cfAuthNSvcRG
        is_linux: true
        number_of_workers: 1
        sku: 'P1V2'
        action: 'create'
      - name: &webServiceFarm 'cf-qa-webservice-asp'
        arm_type: 'Microsoft.Web/serverFarms'
        resource_group: *cfAppSvcRG
        is_linux: true
        number_of_workers: 1
        sku: 'P1V2'
        action: 'create'
    container_registries:
      - name: &primaryACR 'cfqaregistry'
        arm_type: 'Microsoft.ContainerRegistry/registries'
        resource_group: *cfAcrRG
        uri: &uriPrimaryACR 'https://cfqaregistry.azurecr.io'
        sku: 'Standard'
        admin_enabled: true
        action: 'create'
  saas:
    authn_services:
      farm: *authServiceFarm
      services:
        - name: &cfAuthnService 'cf-qa-auth-proxy'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAuthNSvcRG
          container:
            registry: *primaryACR
            name: &authnContainer 'cf-oauth-proxy-docker'
            tag: &authnTag 'connected-facilities'
          acr_webhook:
            name: 'cfqaauthproxywh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          upstreamHost: &postAuthnGateway 'cf-qa-post-authn-ag'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            OAUTH2_PROXY_CLIENT_ID: *appRegistrationID
            OAUTH2_PROXY_CLIENT_SECRET:
              - '##secure_secret={"vault":"'
              - *kvName
              - '","secret_name":"'
              - &oauthProxyClientSecretName 'atg-cf-qa-oauth2-proxy-client-secret'
              - '"}'
              - '##'
            OAUTH2_PROXY_COOKIE_EXPIRE: '20m'
            OAUTH2_PROXY_COOKIE_PATH: '/'
            OAUTH2_PROXY_COOKIE_REFRESH: '5m'
            OAUTH2_PROXY_COOKIE_SECRET:
              - '##secure_secret={"vault":"'
              - *kvName
              - '","secret_name":"'
              - 'atg-cf-qa-oauth2-proxy-cookie-secret'
              - '"}'
              - '##'
            OAUTH2_PROXY_EMAIL_DOMAINS: '*'
            OAUTH2_PROXY_EXTRA_JWT_ISSUERS:
              - 'https://sts.windows.net/caadbe96-024e-4f67-82ec-fb28ff53d16d/'
              - '='
              - 'https://management.core.windows.net/'
            OAUTH2_PROXY_HTTP_ADDRESS: '0.0.0.0:4180'
            OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
            OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
            OAUTH2_PROXY_PING_PATH: '/'
            OAUTH2_PROXY_PROVIDER: 'azure'
            OAUTH2_PROXY_REDIRECT_URL: &appAuthCallbackURL
              - 'https://'
              - *dnsHost
              - '.'
              - *dnsZone
              - '/oauth2/callback'
            OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
            OAUTH2_PROXY_SILENCE_PING_LOGGING: true
            OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: true
            OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
            OAUTH2_PROXY_UPSTREAMS:  # @@ TODO convert to https and private ip on vnet
              - 'http://'
              - *postAuthnIP
              - '.'
              - *defaultAzureLocation
              - '.cloudapp.azure.com/'
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITES_PORT: 4180
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *authnContainer
              - ':'
              - *authnTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
    web_services:
      farm: *webServiceFarm
      services:
        # Health services
        - name: &cfHealthApp 'cf-qa-app'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &healthAppContainer 'cf-react-app-docker'
            tag: &healthAppTag 'connected-facilities'
          acr_webhook:
            name: 'cfqaappwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *healthAppContainer
              - ':'
              - *healthAppTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
        - name: &cfHealthAdminApi 'cf-qa-admin-api'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &adminApiContainer 'cf-ruby-api-docker'
            tag: &adminApiTag 'connected-facilities'
          acr_webhook:
            name: 'cfqaadminapiwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
            SQLServer:
              DATABASE_URL:
                - 'sqlserver://'
                - *cfDefaultDBAdminName
                - ':'
                - '##secure_secret={"vault":"'
                - *kvName
                - '","secret_name":"'
                - *cfDefaultDBSecretName
                - '"}'
                - '##'
                - '@'
                - *cfDefaultDbServer
                - '.database.windows.net:'
                - 1433
                - '/'
                - *healthSchema
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *adminApiContainer
              - ':'
              - *adminApiTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
        - name: &cfHealthApi 'cf-qa-health-api'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &healthApiContainer 'cf-ruby-api-docker'
            tag: &healthApiTag 'connected-facilities'
          acr_webhook:
            name: 'cfqahealthapiwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
            SQLServer:
              DATABASE_URL:
                - 'sqlserver://'
                - *cfDefaultDBAdminName
                - ':'
                - '##secure_secret={"vault":"'
                - *kvName
                - '","secret_name":"'
                - *cfDefaultDBSecretName
                - '"}'
                - '##'
                - '@'
                - *cfDefaultDbServer
                - '.database.windows.net:'
                - 1433
                - '/'
                - *healthSchema
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *healthApiContainer
              - ':'
              - *healthApiTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
        - name: &cfHealthIngestApi 'cf-qa-ingest-api'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &healthIngestContainer 'cf-ruby-api-docker'
            tag: &healthIngestTag 'connected-facilities'
          acr_webhook:
            name: 'cfqaingestapiwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
            SQLServer:
              DATABASE_URL:
                - 'sqlserver://'
                - *cfDefaultDBAdminName
                - ':'
                - '##secure_secret={"vault":"'
                - *kvName
                - '","secret_name":"'
                - *cfDefaultDBSecretName
                - '"}'
                - '##'
                - '@'
                - *cfDefaultDbServer
                - '.database.windows.net:'
                - 1433
                - '/'
                - *healthSchema
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *healthIngestContainer
              - ':'
              - *healthIngestTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
        # Self Healing services
        - name: &cfSelfHealingApp 'cf-qa-self-healing-app'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &shAPPContainer 'cf-self-healing-app-docker'
            tag: &shAPPTag 'connected-facilities'
          acr_webhook:
            name: 'cfqaselfhealingappwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *shAPPContainer
              - ':'
              - *shAPPTag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
        - name: &cfSelfHealingApi 'cf-qa-self-healing-api'
          arm_type: 'Microsoft.Web/sites'
          resource_group: *cfAppSvcRG
          container:
            registry: *primaryACR
            name: &shAPIContainer 'cf-self-healing-api-docker'
            tag: &shAPITag 'connected-facilities'
          acr_webhook:
            name: 'cfqaselfhealingapiwh'
            registry: *primaryACR
            resource_group: *cfAcrRG
            status: 'enabled'
            actions:
              - 'push'
            arm_type: 'Microsoft.ContainerRegistry/registries/webhooks'
          config:
            DATABASE_CONN_STRING: ''  # will be overridden by the connection string
            DOCKER_ENABLE_CI: true
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
            WEBSITE_HTTPLOGGING_RETENTION_DAYS: 7
          connection_strings:
            SQLServer:
              DATABASE_CONN_STRING:
                - 'DRIVER={FreeTDS};SERVER='
                - *cfDefaultDbServer
                - '.database.windows.net;DATABASE='
                - *selfHealingSchema
                - ';UID='
                - *cfDefaultDBAdminName
                - ';PWD='
                - '##secure_secret={"vault":"'
                - *kvName
                - '","secret_name":"'
                - *cfDefaultDBSecretName
                - '"}'
                - '##'
                - ';PORT='
                - 1433
          container_settings:
            DOCKER_CUSTOM_IMAGE_NAME:
              - 'DOCKER|'
              - *primaryACR
              - '.azurecr.io/'
              - *shAPIContainer
              - ':'
              - *shAPITag
            DOCKER_REGISTRY_SERVER_PASSWORD:
              - '##acr_registry_key={"registry":"'
              - *primaryACR
              - '","resource_group":"'
              - *cfAcrRG
              - '"}'
              - '##'
            DOCKER_REGISTRY_SERVER_USERNAME: *primaryACR
            DOCKER_REGISTRY_SERVER_URL: *uriPrimaryACR
            WEBSITES_ENABLE_APP_SERVICE_STORAGE: false
          action: 'create'
    application_gateways:
      - name: 'cf-qa-waf-ag'
        arm_type: 'Microsoft.Network/applicationGateways'
        resource_group: *cfWafRG
        capacity: 2
        min_capacity: 2
        max_capacity: 10
        frontend_port: 443
        http_settings_cookie_based_affinity: 'Disabled'
        http_settings_port: 80
        http_settings_protocol: 'Http'
        http2: 'Enabled'
        routing_rule_type: 'Basic'
        sku: 'WAF_v2'
        servers: &wafServers
          - *cfAuthnService
        address_pools: *wafServers
        private_ip_addresses: []
        # lessons learned: if a named pip exists and provided, but in a different RG, the WAF template tries to create
        # the same name in its own RG, and fails because it uses an incompatible SKU to do it.
        # the workarounds are to (1) create the named pip in the WAF RG prior to creating the WAF, or (2) use
        # the full resource ID path of the pre-existing pip in the other RG
        public_ip_addresses:
          - *wafIP
        waf_policy: []
        waf_config:
          enabled: true
          file_upload_limit: '100'
          firewall_mode: 'Prevention'
          max_request_body_size: '128'
          request_body_check: true
          rule_set_type: 'OWASP'
          rule_set_version: '3.1'
        tls_policy:
          name: 'cf-strict-tls-policy'
          cipherSuites:
            - 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'
            - 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'
            - 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256'
            - 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'
            - 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256'
          minProtocolVersion: 'TLSv1_2'
          policyType: Custom
        ssl_certs:
          - name: 'wildcardqaatrius-iotcom'
            vault_name: *atriusKVName
            subscription: *subscription_tls
        probe:
          name: &wafProbe 'cf-strict-probe'
          arm_type: 'Microsoft.Network/applicationGateways/probes'
          interval: 30
          timeout: 30
          match:
            statusCodes:
              - '200-399'
          minServers: 0
          path: '/'
          pickHostNameFromBackendHttpSettings: true
          protocol: 'Http'
          unhealthyThreshold: 3
        http_settings:
          name: &cfWafHttpSetting 'cf-default-http-settings'
          arm_type: 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection'
          affinityCookieName: 'ApplicationGatewayAffinity'
          authenticationCertificates: []
          connectionDraining: 0
          cookieBasedAffinity: 'Disabled'
          pickHostNameFromBackendAddress: true
          port: 80
          probe:
            name: *wafProbe
          probeEnabled: true
          protocol: Http
          requestTimeout: 20
          trustedRootCertificates: []
        rewrite_rule_sets:
          - name: &wafRewriteRuleSet 'security_headers'
            arm_type: 'Microsoft.Network/applicationGateways/rewriteRuleSets'
            rewriteRules:
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Strict-Transport-Security'
                      headerValue: 'max-age=31536000'
                conditions: []
                name: 'HSTS'
                ruleSequence: 100
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Referrer-Policy'
                      headerValue: 'strict-origin-when-cross-origin'
                conditions: []
                name: 'ReferrerPolicy'
                ruleSequence: 101
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'X-Frame-Options'
                      headerValue: 'sameorigin'
                conditions: []
                name: 'XFrameOptions'
                ruleSequence: 102
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Content-Security-Policy'
                      headerValue: "default-src 'self'"
                conditions:
                  - ignoreCase: true
                    negate: true
                    pattern: '^.+$'
                    variable: 'http_resp_Content-Security-Policy'
                name: 'ContentSecurityPolicy'
                ruleSequence: 103
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Feature-Policy'
                      headerValue: >-
                        accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope
                        'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'
                conditions: []
                name: 'FeaturePolicy'
                ruleSequence: 104
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'X-Content-Type-Options'
                      headerValue: 'nosniff'
                conditions: []
                name: 'X-Content-Type-Options'
                ruleSequence: 108
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Server'
                      headerValue: ''
                conditions: []
                name: 'DeleteServerHeader'
                ruleSequence: 110
              - actionSet:
                  requestHeaderConfigurations: []
                  responseHeaderConfigurations:
                    - headerName: 'Access-Control-Allow-Origin'
                      headerValue: 'https://login.microsoftonline.com'
                conditions: []
                name: 'AccessControlAllowOrigin'
                ruleSequence: 120
        request_routing_rules:
          - name: 'rule1'
            arm_type: 'Microsoft.Network/applicationGateways/requestRoutingRules'
            properties:
              address_pool: *cfAuthnService
              ruleType: 'Basic'
              http_setting: *cfWafHttpSetting
              rewrite_rule_set: *wafRewriteRuleSet  # @@ TODO -- manual at the moment - no way to set this via AZ CLI
        action: 'preserve'
      - name: *postAuthnGateway
        arm_type: 'Microsoft.Network/applicationGateways'
        resource_group: *cfAuthNSvcRG
        capacity: 2
        frontend_port: 80  # @@ fixme
        http_settings_cookie_based_affinity: 'Disabled'
        http_settings_port: 80
        http_settings_protocol: 'Http'
        http2: 'Enabled'
        sku: 'Standard_Medium'
        servers: &serverNames
          - *cfHealthApp
          - *cfHealthAdminApi
          - *cfHealthApi
          - *cfHealthIngestApi
          - *cfSelfHealingApp
          - *cfSelfHealingApi
        address_pools: *serverNames
        private_ip_addresses: []
        public_ip_addresses:
          - *postAuthnIP
        waf_policy: []
        probe:
          name: &authnGwAppProbe 'cf-authn-strict-probe'
          arm_type: 'Microsoft.Network/applicationGateways/probes'
          interval: 30
          timeout: 30
          match:
            statusCodes:
              - '200-399'
          minServers: 0
          path: '/'
          pickHostNameFromBackendHttpSettings: true
          protocol: 'Http'
          unhealthyThreshold: 3
        http_settings:
          name: &postAuthNHttpSettings 'cf-authn-default-http-settings'
          arm_type: 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection'
          affinityCookieName: 'ApplicationGatewayAffinity'
          authenticationCertificates: []
          connectionDraining: 0
          cookieBasedAffinity: 'Disabled'
          pickHostNameFromBackendAddress: true
          port: 80
          probe:
            name: *authnGwAppProbe
          probeEnabled: true
          protocol: Http
          requestTimeout: 20
          trustedRootCertificates: []
        url_path_maps:  # basic strategy is one address pool per server type, and one server type per address pool
          - name: &postAuthnUrlPathMap 'cf-qa-post-authn-path-map-001'
            arm_type: Microsoft.Network/applicationGateways/urlPathMaps
            defaultBackendAddressPool: *cfHealthApp
            defaultBackendHttpSettings: *postAuthNHttpSettings
            defaultRedirectConfiguration: null
            defaultRewriteRuleSet: null
            pathRules:
              - name: 'post-authn-cf-health-app-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfHealthApp
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-app'
                  - '/cf-app/*'
                redirectConfiguration: null
                rewriteRuleSet: null
              - name: 'post-authn-cf-health-admin-api-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfHealthAdminApi
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-admin'
                  - '/cf-admin/*'
                redirectConfiguration: null
                rewriteRuleSet: null
              - name: 'post-authn-cf-health-api-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfHealthApi
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-health'
                  - '/cf-health/*'
                redirectConfiguration: null
                rewriteRuleSet: null
              - name: 'post-authn-cf-health-ingest-api-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfHealthIngestApi
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-ingest'
                  - '/cf-ingest/*'
                redirectConfiguration: null
                rewriteRuleSet: null
              - name: 'post-authn-cf-self-healing-app-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfSelfHealingApp
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-self-healing'
                  - '/cf-self-healing/*'
                redirectConfiguration: null
                rewriteRuleSet: null
              - name: 'post-authn-cf-self-healing-api-path-rule'
                arm_type: 'Microsoft.Network/applicationGateways/urlPathMaps/pathRules'
                backendAddressPool: *cfSelfHealingApi
                backendHttpSettings: *postAuthNHttpSettings
                paths:
                  - '/cf-self-healing-api'
                  - '/cf-self-healing-api/*'
                redirectConfiguration: null
                rewriteRuleSet: null
        request_routing_rules:
          - name: 'rule1'
            arm_type: 'Microsoft.Network/applicationGateways/requestRoutingRules'
            properties:
              address_pool: *cfHealthApp
              ruleType: 'PathBasedRouting'
              urlPathMap: *postAuthnUrlPathMap
              http_setting: *postAuthNHttpSettings
        action: 'preserve'
    application_registration:  # @@ TODO manual - insufficient permissions from AZ CLI
      tenant: *appRegistrationTenant
      application_id: *appRegistrationID
      variables:
        app_auth_callback_url: *appAuthCallbackURL
      client_secret:
        vault: *kvName
        secret_name: *oauthProxyClientSecretName
        description: 'cf-qa-auth'  # unfortunately limited to 15 characters by AZ CLI
